---
name: Run IaC Workflow

on:
  push:
    branches:
      - '*'  

  workflow_dispatch:
    inputs:
      cloud_account:
        description: 'What cloud account are you using?'
        required: true
        default: 'dp-sandbox'

      aws_region:
        description: 'region to deploy to (us-east-1)'
        required: true
        default: 'us-east-1'

      environment:
        description: 'Environment to deploy to (nonprod / prod)'
        required: true
        default: 'nonprod'

      terraform_action:
        description: 'Terraform (apply / plan)'
        required: true
        default: 'plan'

permissions:
    id-token: write # This is required for aws oidc connection

jobs:
  Run-IaC:
    name: AWS_TF_Remote_Backend
    runs-on: ubuntu-latest

    steps:
      - name: Set Environment Variable Conditionally
        run: |
          if [ "${{ github.event_name }}" == 'workflow_dispatch' ]; then
            echo "-------- Manual Job Values --------"
            echo "CLOUD_ACCOUNT=${{inputs.cloud_account}}" >> $GITHUB_ENV
            echo "AWS_REGION=${{inputs.aws_region}}" >> $GITHUB_ENV
            echo "ENVIRONMENT=${{inputs.environment}}" >> $GITHUB_ENV
            echo "TERRAFORM_ACTION=${{inputs.terraform_action}}" >> $GITHUB_ENV
            echo "TF_VAR_FILE=vars/${{inputs.cloud_account}}/${{inputs.environment}}/vars.tfvars" >> $GITHUB_ENV
            echo "TF_VAR_oidc_thumbprint=${{ secrets.OIDC_THUMBPRINT }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_region=${{inputs.aws_region}}" >> $GITHUB_ENV
          else
            echo "-------- Default Job Values --------"
            echo "CLOUD_ACCOUNT=${{vars.cloud_account}}" >> $GITHUB_ENV
            echo "AWS_REGION=${{vars.aws_region}}" >> $GITHUB_ENV
            echo "ENVIRONMENT=${{vars.environment}}" >> $GITHUB_ENV
            echo "TERRAFORM_ACTION=${{vars.terraform_action}}" >> $GITHUB_ENV
            echo "TF_VAR_FILE=vars/${{vars.cloud_account}}/${{vars.environment}}/vars.tfvars" >> $GITHUB_ENV
            echo "TF_VAR_oidc_thumbprint=${{ secrets.OIDC_THUMBPRINT }}" >> $GITHUB_ENV
            echo "TF_VAR_aws_region=${{vars.aws_region}}" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4.1.1 #https://github.com/marketplace/actions/checkout
      
      - name: Get repository information
        run: |
          echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
          echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
          echo "List files in the repository"
          ls -la ${{ github.workspace }}

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4.0.2 #https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 #https://github.com/marketplace/actions/hashicorp-setup-terraform
        with:
          terraform_version: 1.6.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: AWS_TF_Harbor
        run: terraform init

      - name: Terraform Validate
        working-directory: AWS_TF_Harbor
        run: terraform validate

      - name: Terraform Plan
        working-directory: AWS_TF_Harbor
        run: terraform plan -var-file ${{ env.TF_VAR_FILE }}

      - name: Terraform Apply
        if: ${{ success() && github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && env.TERRAFORM_ACTION == 'apply'}}
        working-directory: AWS_TF_Harbor
        run: |
          echo "Step only executes when main branch manually triggered"
          terraform apply -auto-approve \
            -var-file ${{ env.TF_VAR_FILE }}

  Run-IaC:
    name: AWS_TF_Harbor
    runs-on: ubuntu-latest